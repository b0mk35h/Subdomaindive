#!/bin/bash

# Define the current version and GitHub repository
VERSION="1.0"
GITHUB_REPO="https://github.com/b0mk35h/Subdomaindive.git"

# Function to display ASCII art and introductory message
display_intro() {
    cat <<"ASCII"
 ____        _     ____                        _       ____  _           
/ ___| _   _| |__ |  _ \  ___  _ __ ___   __ _(_)_ __ |  _ \(_)_   _____ 
\___ \| | | | '_ \| | | |/ _ \| '_ ` _ \ / _` | | '_ \| | | | \ \ / / _ \
 ___) | |_| | |_) | |_| | (_) | | | | | | (_| | | | | | |_| | |\ V /  __/
|____/ \__,_|_.__/|____/ \___/|_| |_| |_|\__,_|_|_| |_|____/|_| \_/ \___|

                                                             
	    ðŸ—²  Automated Subdomain Gathering Tool   ðŸ—²
		 Developed By b0mk35h
         
ASCII
}

# Function to display help message
display_help() {
    display_intro
    cat <<"EOF"

Usage:
$ ./subdomaindive [flags]

Flags:
INPUT:
  -d, -domain string  domains to find subdomains for

OUTPUT:
  -o, -output string  file to write output to

HELP:
  -h, -help       find help

VERSION:
  -v, -version    display version information
  
UPDATE:
  -u, -update     check for updates and update if available
  
Sample command:  
$ ./subdomaindive -d example.com -o output.txt
EOF
}

# Function to display the current version
display_version() {
    echo "Current Version: $VERSION"
}

# Function to check for updates on GitHub
check_for_updates() {
    latest_version=$(git ls-remote --tags $GITHUB_REPO | awk '{print $2}' | grep -oE "v[0-9]+\.[0-9]+" | sort -V | tail -n1)
    if [[ $latest_version > $VERSION ]]; then
        echo "A newer version ($latest_version) is available on GitHub: $GITHUB_REPO"
        read -p "Do you want to update? (y/n): " choice
        if [[ $choice =~ ^[Yy]$ ]]; then
            download_latest_version
        fi
    else
        echo "You are using the latest version of Subdomaindive."
    fi
}

# Function to download the latest version from GitHub
download_latest_version() {
    echo "Downloading the latest version..."
    wget -O subdomaindive_new.sh "$GITHUB_REPO/raw/main/subdomaindive.sh"
    if [[ $? -eq 0 ]]; then
        echo "Download successful."
        echo "Replacing the current script with the latest version..."
        mv -f subdomaindive_new.sh subdomaindive.sh
        chmod +x subdomaindive.sh
        echo "Update completed. Please run the script again."
        exit 0
    else
        echo "Failed to download the latest version."
        exit 1
    fi
}

# Parse command-line options
while getopts ":d:o:hvu" opt; do
    case ${opt} in
        d )
            domain="$OPTARG"
            # Display intro if domain is provided without any other option
            if [[ -z "$output_file" && -z "$domain" ]]; then
                display_intro
            fi
            ;;
        o )
            output_file="$OPTARG"
            ;;
        h )
            display_help
            exit 0
            ;;
        v )
            display_version
            exit 0
            ;;
        u )
            check_for_updates
            exit 0
            ;;
        \? )
            echo "Invalid option: $OPTARG" 1>&2
            exit 1
            ;;
        : )
            echo "Invalid option: $OPTARG requires an argument" 1>&2
            exit 1
            ;;
    esac
done

shift $((OPTIND -1))

# Display intro before starting subdomain enumeration
display_intro

# Check if tool is updated or not
if [[ $latest_version > $VERSION ]]; then
   echo -e "[\e[34mINF\e[0m] Current subdomaindive version: $VERSION [\e[30moutdated\e[0m]"
 else
  echo -e "[\e[34mINF\e[0m] Current subdomaindive version: $VERSION [\e[32mupdate\e[0m]"
fi

echo -e "[\e[34mINF\e[0m] Enumerationg sun-domin for: [\e[32m$domain\e[0m]"

# Validate input options
if [[ -z "$domain" ]]; then
    echo "Please provide a domain."
    exit 1
fi

# Function to find subdomains from Google
find_subdomains_google() {
    url="https://www.google.com/search?q=site%3A$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -Eo "(http|https)://[a-zA-Z0-9._-]+\.$domain" | sed 's/.*\/\///' | sort -u
}

# Function to find subdomains from crt.sh
find_subdomains_crtsh() {
    url="https://crt.sh/?q=%25.$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -Eo ">[a-zA-Z0-9._-]+\.${domain}</TD>" | sed 's/[^>]*>\([^<]*\)<\/TD>/\1/' | sort -u
}

# Function to find subdomains from Bing
find_subdomains_bing() {
    url="https://www.bing.com/search?q=site%3A$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -Eo "(http|https)://[a-zA-Z0-9._-]+\.$domain" | sed 's/.*\/\///' | sort -u
}

# Function to find subdomains from Baidu
find_subdomains_baidu() {
    url="https://www.baidu.com/s?wd=site%3A$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -Eo "(http|https)://[a-zA-Z0-9._-]+\.$domain" | sed 's/.*\/\///' | sort -u
}

# Function to find subdomains from DNSdumpster
find_subdomains_dnsdumpster() {
    url="https://dnsdumpster.com/"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    csrf_token=$(curl -A "$user_agent" -s "$url" | grep -oP "name='csrfmiddlewaretoken' value='\K[^']+" | head -1)
    response=$(curl -A "$user_agent" -s -X POST -H "Referer: $url" -H "X-CSRFToken: $csrf_token" -d "csrfmiddlewaretoken=$csrf_token&targetip=$domain" "$url")
    echo "$response" | grep -Eo "[a-zA-Z0-9._-]+\.$domain" | sort -u
}

# Function to find subdomains from Yahoo
find_subdomains_yahoo() {
    url="https://search.yahoo.com/search?p=site%3A$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -Eo "(http|https)://[a-zA-Z0-9._-]+\.$domain" | sed 's/.*\/\///' | sort -u
}

# Function to find subdomains from Netcraft
find_subdomains_netcraft() {
    url="https://searchdns.netcraft.com/?restriction=site+contains&host=.$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -Eo "[a-zA-Z0-9._-]+\.$domain" | sort -u
}

# Function to find subdomains from Ask
find_subdomains_ask() {
    url="https://www.ask.com/web?q=site%3A$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -Eo "(http|https)://[a-zA-Z0-9._-]+\.$domain" | sed 's/.*\/\///' | sort -u
}

# Function to find subdomains from ThreatCrowd
find_subdomains_threatcrowd() {
    url="https://www.threatcrowd.org/searchApi/v2/domain/report/?domain=$domain"
    response=$(curl -s "$url")
    echo "$response" | grep -o '"subdomains":\[[^]]*\]' | sed 's/"subdomains":\[\([^]]*\)\]/\1/' | tr -d '"' | tr -d '[],' | tr -s ' ' '\n' | sort -u
}


# Function to find subdomains from SSL Certificates
find_subdomains_sslcertificates() {
    url="https://crt.sh/?q=%25.$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -Eo ">[a-zA-Z0-9._-]+\.${domain}</TD>" | sed 's/[^>]*>\([^<]*\)<\/TD>/\1/' | sort -u
}

# Function to find subdomains from PassiveDNS without jq
find_subdomains_passivedns() {
    url="https://dns.bufferover.run/dns?q=.$domain"
    user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    response=$(curl -A "$user_agent" -s "$url")
    echo "$response" | grep -o '"[^"]*\.${domain}"' | sed 's/"//g; s/^.*\.//; /^$/d' | sort -u
}


# Function to find subdomains using subfinder (with banner removed)
find_subdomains_subfinder() {
    subfinder -d $domain -silent | sort -u
}

# Function to find subdomains using amass (with banner removed)
find_subdomains_amass() {
    amass enum -norecursive -d $domain -silent | sort -u
}
# Function to find subdomains using assetfinder
find_subdomains_assetfinder() {
    assetfinder --subs-only $domain | sort -u
}

# Find subdomains from Google
google_subdomains=$(find_subdomains_google)

# Find subdomains from crt.sh
crtsh_subdomains=$(find_subdomains_crtsh)

# Find subdomains from Bing
bing_subdomains=$(find_subdomains_bing)

# Find subdomains from Baidu
baidu_subdomains=$(find_subdomains_baidu)

# Find subdomains from DNSdumpster
dnsdumpster_subdomains=$(find_subdomains_dnsdumpster)

# Find subdomains from Yahoo
yahoo_subdomains=$(find_subdomains_yahoo)

# Find subdomains from Netcraft
netcraft_subdomains=$(find_subdomains_netcraft)

# Find subdomains from Ask
ask_subdomains=$(find_subdomains_ask)

# Find subdomains from ThreatCrowd
threatcrowd_subdomains=$(find_subdomains_threatcrowd)

# Find subdomains from SSL Certificates
sslcertificates_subdomains=$(find_subdomains_sslcertificates)

# Find subdomains from PassiveDNS
passivedns_subdomains=$(find_subdomains_passivedns)

# Find subdomains using subfinder (with banner removed)
subfinder_subdomains=$(find_subdomains_subfinder)

# Find subdomains using amass (with banner removed)
amass_subdomains=$(find_subdomains_amass)
# Find subdomains using assetfinder
assetfinder_subdomains=$(find_subdomains_assetfinder)

# Combine and sort subdomains
all_subdomains=$(echo -e "$google_subdomains\n$crtsh_subdomains\n$bing_subdomains\n$baidu_subdomains\n$dnsdumpster_subdomains\n$yahoo_subdomains\n$subfinder_subdomains\n$amass_subdomains\n$netcraft_subdomains\n$ask_subdomains\n$threatcrowd_subdomains\n$sslcertificates_subdomains\n$passivedns_subdomains\n$assetfinder_subdomains" | sort -u)
# Count the number of subdomains
num_subdomains=$(echo "$all_subdomains" | wc -l)

if [ -z "$all_subdomains" ]; then
    echo "No subdomains found for $domain"
else
    echo -e "[\e[34mINF\e[0m] Number of subdomains found for $domain: $num_subdomains"
fi

# Save subdomains to file if output file is specified
if [ -n "$output_file" ]; then
    echo "$all_subdomains" > "$output_file"
    echo -e "[\e[34mINF\e[0m] Subdomains saved to- $output_file"
fi
